<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Library Identitystore</title>
    </properties>
    <body>
        <section name="Library Identitystore">
            <subsection name="Introduction">
                <p>
                This library provides services to communicate with ShortUrlServer REST API.
                </p>
            </subsection>
            <subsection name="Services">
                <p>
                The main service is <code>fr.paris.lutece.plugins.shorturl.service.ShortUrlClientService</code> which provides methods to call ShortUrlServer.
                </p>
               
              
            </subsection>
            <subsection name="Configuration using Spring context">
                <p>
                Define the  server URL end point :
                </p>
                <p>
                Here is an example :
                    <div class="source">
                        <pre>
&lt;bean id="lib-identitystore.ShortUrlClientService" class="fr.paris.lutece.plugins.identitystore.v2.web.rs.serviceShortUrlClientServicet"&gt;
    &lt;property name="IdentityStoreEndPoint"&gt;
        &lt;value&gt;http://mydomain.com/url/to/identitystore&lt;/value&gt;
    &lt;/property&gt;
&lt;/bean&gt;
&lt;bean id="lib-identitystore.identityService" class="fr.paris.lutece.plugins.identitystore.v2.web.service.IdentityService"&gt;
    &lt;constructor-arg ref="lib-identitystore.simpleTransport"/&gt;
&lt;/bean&gt;
                        </pre>
                    </div>
                </p>
                <p>
                Here is an example of Spring configuration with the HTTP transport <code>IdentityTransportApiManagerRest</code>:
                    <div class="source">
                        <pre>
&lt;bean id="lib-identitystore.apiManagerTransport" class="fr.paris.lutece.plugins.identitystore.v2.web.rs.service.IdentityTransportApiManagerRest"&gt;
    &lt;property name="identityStoreEndPoint"&gt;
        &lt;value&gt;http://mydomain.com/url/to/apimanager/api/identitystore&lt;/value&gt;
    &lt;/property&gt;
    &lt;property name="apiManagerEndPoint"&gt;
        &lt;value&gt;http://mydomain.com/url/to/apimanager/token&lt;/value&gt;
    &lt;/property&gt;
    &lt;property name="apiManagerCredentials"&gt;
        &lt;value&gt;your_private_key&lt;/value&gt;
    &lt;/property&gt;
&lt;/bean&gt;
&lt;bean id="lib-identitystore.identityService" class="fr.paris.lutece.plugins.identitystore.v2.web.service.IdentityService"&gt;
    &lt;constructor-arg ref="lib-identitystore.apiManagerTransport"/&gt;
&lt;/bean&gt;
                        </pre>
                    </div>
                </p>
            </subsection>
            <subsection name="Configuration in Java code">
                <p>
                The service can directly be created in the Java code. Here is an example with the HTTP transport <code>IdentityTransportApiManagerRest</code> (the same mechanism can be applied for the HTTP transport <code>IdentityTransportRest</code>).
                </p>
                <p>
                First, define the following keys in a properties file:
                    <div class="source">
                        <pre>
myplugin.endpoint.identitystore=http://mydomain.com/url/to/apimanager/api/identitystore
myplugin.endpoint.token=http://mydomain.com/url/to/apimanager/token
myplugin.apimanager.credentials=your_private_key
                        </pre>  
                    </div>
                </p>
                <p>
                Then, add the following code in the Java code:
                    <div class="source">
                        <pre>
private static final String PROPERTY_ENDPOINT_IDENTITYSTORE = "myplugin.endpoint.identitystore";
private static final String PROPERTY_ENDPOINT_TOKEN = "myplugin.endpoint.token";
private static final String PROPERTY_APIMANAGER_CREDENTIALS = "myplugin.apimanager.credentials";
...
IdentityTransportApiManagerRest apiManagerTransport = new IdentityTransportApiManagerRest(  );
apiManagerTransport.setIdentityStoreEndPoint( AppPropertiesService.getProperty( PROPERTY_ENDPOINT_IDENTITYSTORE ) );
apiManagerTransport.setApiManagerEndPoint( AppPropertiesService.getProperty( PROPERTY_ENDPOINT_TOKEN ) );
apiManagerTransport.setApiManagerCredentials( AppPropertiesService.getProperty( PROPERTY_APIMANAGER_CREDENTIALS ) );

IdentityService identityService = new IdentityService( apiManagerTransport );
                        </pre>
                    </div>
                </p>
            </subsection>
        </section>
    </body>
</document>

